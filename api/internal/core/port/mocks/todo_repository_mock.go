// Code generated by MockGen. DO NOT EDIT.
// Source: ./todo_contract.go
//
// Generated by this command:
//
//	mockgen -source=./todo_contract.go -destination=./mocks/todo_repository_mock.go -package=todo_repository_mock
//

// Package todo_repository_mock is a generated GoMock package.
package todo_repository_mock

import (
	context "context"
	orm "microservice/internal/adapter/orm"
	domain "microservice/internal/core/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
	isgomock struct{}
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoRepository) Create(ctx context.Context, ent *domain.Todo) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ent)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoRepositoryMockRecorder) Create(ctx, ent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoRepository)(nil).Create), ctx, ent)
}

// GetByUUID mocks base method.
func (m *MockITodoRepository) GetByUUID(ctx context.Context, id *uuid.UUID) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, id)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockITodoRepositoryMockRecorder) GetByUUID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockITodoRepository)(nil).GetByUUID), ctx, id)
}

// GetList mocks base method.
func (m *MockITodoRepository) GetList(ctx context.Context, qp *domain.TodoListReqQryParam) (*domain.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, qp)
	ret0, _ := ret[0].(*domain.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockITodoRepositoryMockRecorder) GetList(ctx, qp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockITodoRepository)(nil).GetList), ctx, qp)
}

// Tx mocks base method.
func (m *MockITodoRepository) Tx(db orm.ISql) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Tx", db)
}

// Tx indicates an expected call of Tx.
func (mr *MockITodoRepositoryMockRecorder) Tx(db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockITodoRepository)(nil).Tx), db)
}

// MockITodoUsecase is a mock of ITodoUsecase interface.
type MockITodoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockITodoUsecaseMockRecorder
	isgomock struct{}
}

// MockITodoUsecaseMockRecorder is the mock recorder for MockITodoUsecase.
type MockITodoUsecaseMockRecorder struct {
	mock *MockITodoUsecase
}

// NewMockITodoUsecase creates a new mock instance.
func NewMockITodoUsecase(ctrl *gomock.Controller) *MockITodoUsecase {
	mock := &MockITodoUsecase{ctrl: ctrl}
	mock.recorder = &MockITodoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoUsecase) EXPECT() *MockITodoUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoUsecase) Create(ctx context.Context, ent *domain.Todo) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ent)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoUsecaseMockRecorder) Create(ctx, ent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoUsecase)(nil).Create), ctx, ent)
}

// Detail mocks base method.
func (m *MockITodoUsecase) Detail(ctx context.Context, id *uuid.UUID) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockITodoUsecaseMockRecorder) Detail(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockITodoUsecase)(nil).Detail), ctx, id)
}

// GetList mocks base method.
func (m *MockITodoUsecase) GetList(ctx context.Context, qp *domain.TodoListReqQryParam) (*domain.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, qp)
	ret0, _ := ret[0].(*domain.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockITodoUsecaseMockRecorder) GetList(ctx, qp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockITodoUsecase)(nil).GetList), ctx, qp)
}
