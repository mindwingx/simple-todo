// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go
//
// Generated by this command:
//
//	mockgen -source=./contract.go -destination=./mocks/sqs_mock.go -package=sqs_mocks
//

// Package sqs_mocks is a generated GoMock package.
package sqs_mocks

import (
	domain "microservice/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIQueue is a mock of IQueue interface.
type MockIQueue struct {
	ctrl     *gomock.Controller
	recorder *MockIQueueMockRecorder
	isgomock struct{}
}

// MockIQueueMockRecorder is the mock recorder for MockIQueue.
type MockIQueueMockRecorder struct {
	mock *MockIQueue
}

// NewMockIQueue creates a new mock instance.
func NewMockIQueue(ctrl *gomock.Controller) *MockIQueue {
	mock := &MockIQueue{ctrl: ctrl}
	mock.recorder = &MockIQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueue) EXPECT() *MockIQueueMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockIQueue) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockIQueueMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIQueue)(nil).Init))
}

// Send mocks base method.
func (m *MockIQueue) Send(todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIQueueMockRecorder) Send(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIQueue)(nil).Send), todo)
}
