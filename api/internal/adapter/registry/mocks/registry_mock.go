// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go
//
// Generated by this command:
//
//	mockgen -source=./contract.go -destination=./mocks/registry_mock.go -package=registry_mock
//

// Package registry_mock is a generated GoMock package.
package registry_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRegistry is a mock of IRegistry interface.
type MockIRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIRegistryMockRecorder
	isgomock struct{}
}

// MockIRegistryMockRecorder is the mock recorder for MockIRegistry.
type MockIRegistryMockRecorder struct {
	mock *MockIRegistry
}

// NewMockIRegistry creates a new mock instance.
func NewMockIRegistry(ctrl *gomock.Controller) *MockIRegistry {
	mock := &MockIRegistry{ctrl: ctrl}
	mock.recorder = &MockIRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegistry) EXPECT() *MockIRegistryMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockIRegistry) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockIRegistryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIRegistry)(nil).Init))
}

// Parse mocks base method.
func (m *MockIRegistry) Parse(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Parse", arg0)
}

// Parse indicates an expected call of Parse.
func (mr *MockIRegistryMockRecorder) Parse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIRegistry)(nil).Parse), arg0)
}
