// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go
//
// Generated by this command:
//
//	mockgen -source=./contract.go -destination=./mocks/locale_mock.go -package=locale_mock
//

// Package locale_mock is a generated GoMock package.
package locale_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILocale is a mock of ILocale interface.
type MockILocale struct {
	ctrl     *gomock.Controller
	recorder *MockILocaleMockRecorder
	isgomock struct{}
}

// MockILocaleMockRecorder is the mock recorder for MockILocale.
type MockILocaleMockRecorder struct {
	mock *MockILocale
}

// NewMockILocale creates a new mock instance.
func NewMockILocale(ctrl *gomock.Controller) *MockILocale {
	mock := &MockILocale{ctrl: ctrl}
	mock.recorder = &MockILocaleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILocale) EXPECT() *MockILocaleMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockILocale) Get(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockILocaleMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockILocale)(nil).Get), key)
}

// Init mocks base method.
func (m *MockILocale) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockILocaleMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockILocale)(nil).Init))
}

// Plural mocks base method.
func (m *MockILocale) Plural(key string, params map[string]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plural", key, params)
	ret0, _ := ret[0].(string)
	return ret0
}

// Plural indicates an expected call of Plural.
func (mr *MockILocaleMockRecorder) Plural(key, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plural", reflect.TypeOf((*MockILocale)(nil).Plural), key, params)
}
