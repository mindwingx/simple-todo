// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go
//
// Generated by this command:
//
//	mockgen -source=./contract.go -destination=./mocks/orm_mock.go -package=orm_mock
//

// Package orm_mock is a generated GoMock package.
package orm_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockISql is a mock of ISql interface.
type MockISql struct {
	ctrl     *gomock.Controller
	recorder *MockISqlMockRecorder
	isgomock struct{}
}

// MockISqlMockRecorder is the mock recorder for MockISql.
type MockISqlMockRecorder struct {
	mock *MockISql
}

// NewMockISql creates a new mock instance.
func NewMockISql(ctrl *gomock.Controller) *MockISql {
	mock := &MockISql{ctrl: ctrl}
	mock.recorder = &MockISqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISql) EXPECT() *MockISqlMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockISql) Begin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Begin")
}

// Begin indicates an expected call of Begin.
func (mr *MockISqlMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockISql)(nil).Begin))
}

// C mocks base method.
func (m *MockISql) C() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// C indicates an expected call of C.
func (mr *MockISqlMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockISql)(nil).C))
}

// Commit mocks base method.
func (m *MockISql) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockISqlMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockISql)(nil).Commit))
}

// Init mocks base method.
func (m *MockISql) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockISqlMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISql)(nil).Init))
}

// Migrate mocks base method.
func (m *MockISql) Migrate(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Migrate", path)
}

// Migrate indicates an expected call of Migrate.
func (mr *MockISqlMockRecorder) Migrate(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockISql)(nil).Migrate), path)
}

// Resolve mocks base method.
func (m *MockISql) Resolve(dbErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", dbErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockISqlMockRecorder) Resolve(dbErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockISql)(nil).Resolve), dbErr)
}

// Rollback mocks base method.
func (m *MockISql) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockISqlMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockISql)(nil).Rollback))
}

// Seed mocks base method.
func (m *MockISql) Seed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Seed")
}

// Seed indicates an expected call of Seed.
func (mr *MockISqlMockRecorder) Seed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seed", reflect.TypeOf((*MockISql)(nil).Seed))
}

// Stop mocks base method.
func (m *MockISql) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockISqlMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockISql)(nil).Stop))
}

// MockISqlGeneric is a mock of ISqlGeneric interface.
type MockISqlGeneric struct {
	ctrl     *gomock.Controller
	recorder *MockISqlGenericMockRecorder
	isgomock struct{}
}

// MockISqlGenericMockRecorder is the mock recorder for MockISqlGeneric.
type MockISqlGenericMockRecorder struct {
	mock *MockISqlGeneric
}

// NewMockISqlGeneric creates a new mock instance.
func NewMockISqlGeneric(ctrl *gomock.Controller) *MockISqlGeneric {
	mock := &MockISqlGeneric{ctrl: ctrl}
	mock.recorder = &MockISqlGenericMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlGeneric) EXPECT() *MockISqlGenericMockRecorder {
	return m.recorder
}

// C mocks base method.
func (m *MockISqlGeneric) C() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// C indicates an expected call of C.
func (mr *MockISqlGenericMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockISqlGeneric)(nil).C))
}

// Init mocks base method.
func (m *MockISqlGeneric) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockISqlGenericMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISqlGeneric)(nil).Init))
}

// Migrate mocks base method.
func (m *MockISqlGeneric) Migrate(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Migrate", path)
}

// Migrate indicates an expected call of Migrate.
func (mr *MockISqlGenericMockRecorder) Migrate(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockISqlGeneric)(nil).Migrate), path)
}

// Seed mocks base method.
func (m *MockISqlGeneric) Seed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Seed")
}

// Seed indicates an expected call of Seed.
func (mr *MockISqlGenericMockRecorder) Seed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seed", reflect.TypeOf((*MockISqlGeneric)(nil).Seed))
}

// Stop mocks base method.
func (m *MockISqlGeneric) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockISqlGenericMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockISqlGeneric)(nil).Stop))
}

// MockISqlTx is a mock of ISqlTx interface.
type MockISqlTx struct {
	ctrl     *gomock.Controller
	recorder *MockISqlTxMockRecorder
	isgomock struct{}
}

// MockISqlTxMockRecorder is the mock recorder for MockISqlTx.
type MockISqlTxMockRecorder struct {
	mock *MockISqlTx
}

// NewMockISqlTx creates a new mock instance.
func NewMockISqlTx(ctrl *gomock.Controller) *MockISqlTx {
	mock := &MockISqlTx{ctrl: ctrl}
	mock.recorder = &MockISqlTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlTx) EXPECT() *MockISqlTxMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockISqlTx) Begin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Begin")
}

// Begin indicates an expected call of Begin.
func (mr *MockISqlTxMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockISqlTx)(nil).Begin))
}

// Commit mocks base method.
func (m *MockISqlTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockISqlTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockISqlTx)(nil).Commit))
}

// Resolve mocks base method.
func (m *MockISqlTx) Resolve(dbErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", dbErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockISqlTxMockRecorder) Resolve(dbErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockISqlTx)(nil).Resolve), dbErr)
}

// Rollback mocks base method.
func (m *MockISqlTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockISqlTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockISqlTx)(nil).Rollback))
}
